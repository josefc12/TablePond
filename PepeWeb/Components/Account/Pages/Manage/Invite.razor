@page "/Account/Manage/Invite"

@using System.ComponentModel.DataAnnotations
@using TablePond.Data.DTO
@using TablePond.Services

@inject IdentityUserAccessor UserAccessor
@inject InvitationService invitationService

<PageTitle>Create Invite</PageTitle>

<StatusMessage />
<h3>Create Invite</h3>

<div class="row">
    <div class="col-md-6">
        <p>Invite another person to use this app</p>
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="InviteUser" FormName="invite" >
             <DataAnnotationsValidator />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Invite</button>
        </EditForm>
        @* Display status messages, if there is a status message *@
        @if (!string.IsNullOrEmpty(SuccessMessage))
        {
            <div class="alert alert-success mt-3">
                @SuccessMessage
            </div>
        }
        @if (!string.IsNullOrEmpty(UsageMessage))
        {
            <div class="alert alert-success mt-3">
                @UsageMessage
            </div>
        }
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger mt-3">
                @ErrorMessage
            </div>
        }
    </div>
    <div class="col-md-6">
        <p>Created invitations</p>
        @foreach (var invitation in _userInvitations)
        {
            <div class="card text-bg-light mb-3">
                <div class="card-header">@invitation.EmailAddress</div>
                <div class="card-body">
                    @if (invitation.IsActive)
                    {
                        <p class="card-text text-primary">Invitation pending. (@invitation.Code)</p>
                    }
                    else
                    {
                        <p class="card-text text-success">User registered. (@invitation.Code)</p>
                    }

                </div>
            </div>
        }
    </div>
</div>

@code {
    private string? errorMessage;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private string? _invitationCode;
    private List<InvitationDTO> _userInvitations = new List<InvitationDTO>();

    private string? SuccessMessage;
    private string? ErrorMessage;
    private string? UsageMessage;

    protected override async Task OnInitializedAsync()
    {
        _ = await UserAccessor.GetRequiredUserAsync(HttpContext);


        _userInvitations = await invitationService.GetUserInvitations();
    }

    private async Task InviteUser(EditContext editContext)
    {

        SuccessMessage = null;
        ErrorMessage = null;
        UsageMessage = null;

        _invitationCode = await invitationService.InviteUser(Input.Email);
        if (_invitationCode != null)
        {
            SuccessMessage = "User invited! Send this code to them: " + _invitationCode;
            UsageMessage = "Use in the url like so: '(your website url here)/Account/Register/(your code here).";
        }
        else
        {
            ErrorMessage = "User couldn't be invited, or was already invited!";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }

}
