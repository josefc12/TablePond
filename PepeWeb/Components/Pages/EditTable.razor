@page "/edit/{tableId:int}"

@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using System.Diagnostics
@using PepeWeb.Data.Models
@using PepeWeb.Data.Enums
@using PepeWeb.Data.VirtualModels
@using System.Security.Claims
@using PepeWeb.Data.DTO

@inject PepeWeb.Services.TableManagementService tableManagementService
@inject PepeWeb.Services.TableService tableService
@inject NavigationManager navigationManager

@attribute [Authorize]

<PageTitle>Edit table</PageTitle>

<h1>Edit table</h1>

<AuthorizeView>
    <Authorized>

        <EditForm Context="editFormContext" Model="_fieldList" OnValidSubmit="Submit" FormName="EditTable">
            <div class="row">
                <div class="col-md-6">

                    @* Input for the name of the table *@
                    <label class="form-label">
                        Table name:
                        <InputText class="form-control" placeholder="Table name" @bind-Value="_tableName" />
                        <ValidationMessage For="() => _tableName" class="text-danger" />
                    </label>

                    <br />
                    <hr />

                    @* Reload laready existing fields into the form *@
                    @foreach (var item in _fieldList)
                    {
                        <div>
                            @* Input for field name/title *@
                            <label class="form-label">
                                Field @item.Id:
                                <InputText class="form-control" placeholder="Field name" @bind-Value="item.Name" />
                                <ValidationMessage For="() => item.Name" class="text-danger" />
                            </label>

                            @* Dropdown input for field type *@
                            <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                @item.Type.ToString()
                            </button>

                            @* Dropdown menu itself *@
                            <ul class="dropdown-menu">
                                @foreach (var fieldType in Enum.GetValues(typeof(CustomFieldType)).Cast<CustomFieldType>())
                                {
                                    <li>
                                        <button class="dropdown-item" type="button" @onclick="() => item.Type = fieldType">
                                            @fieldType
                                        </button>
                                        <ValidationMessage For="() => item.Type" class="text-danger" />
                                    </li>
                                }
                            </ul>

                            @* Button that deletes this field *@
                            <button class="btn btn-danger" type="button" @onclick="() => RemoveItem(item)">X</button>
                        </div>
                    }

                    <br />

                    @* Button for adding more fields *@
                    <button class="btn btn-outline-primary" type="button" @onclick="AddItem"> + Add Field</button>

                    <br />
                    <hr />

                    @* Button that updates the table *@
                    <button class="btn btn-success" type="submit">Submit and return</button>

                    @* Display status messages, if there is a status message *@
                    @if (!string.IsNullOrEmpty(StatusMessage))
                    {
                        <div class="alert alert-success mt-3">
                            @StatusMessage
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger mt-3">
                            @ErrorMessage
                        </div>
                    }

                </div>
            </div>
        </EditForm>

    </Authorized>
    <NotAuthorized>
        You are not authorized to view this content. Please log in.
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public int tableId { get; set; }

    private string? _tableName;
    private string? _tableNameInitial;
    private TableDTO? _relatedTableObject;
    private string? StatusMessage;
    private string? ErrorMessage;
    private List<FieldDTO> _fieldList = new List<FieldDTO>();

    private TableConstructDTO _table = new TableConstructDTO()
        {
            Columns = new List<FieldDTO>(),
            Rows = new List<TableRow>() { new TableRow() { Values = new List<string>() } },

        };

    protected override async Task OnInitializedAsync()
    {
        // Load table data - table to fields relationship
        TableConstructDTO userTable = await tableService.GetUserTableData(tableId);

        _table = userTable;
        _tableName = _table.Name;
        _tableNameInitial = _table.Name;
        _relatedTableObject = await tableService.GetTable(tableId); // Load only the table object itself
        _fieldList = _table.Columns;

    }

    private async Task Submit()
    {

        ErrorMessage = null;
        StatusMessage = null;

        if (_tableName != null && (_tableNameInitial == _tableName || await tableManagementService.TableExists(_tableName) == false))
        {
            _table.Name = _tableName;
            _table.Columns = _fieldList;

            try
            {
                await tableManagementService.EditTable(_table);
                StatusMessage = "Table updated successfully!";
            }
            catch (Exception ex)
            {
                // Log error if needed
                Debug.WriteLine($"Error creating table: {ex.Message}");
                ErrorMessage = "An error occurred while editing the table. Please try again.";
            }
        }
        else
        {
            ErrorMessage = "Table with this name already exists!";
            return;
        }

        navigationManager.NavigateTo($"/table/{tableId}", true);

    }

    private void AddItem()
    {
        if (_relatedTableObject != null)
        {
            _fieldList.Add(new FieldDTO { Table = _relatedTableObject });
        }
        else
        {
            ErrorMessage = "The table object had not been loaded!";
        }
    }

    private void RemoveItem(FieldDTO item)
    {
        _fieldList.Remove(item);
    }


}

