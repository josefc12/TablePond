@page "/create"

@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using System.Diagnostics
@using PepeWeb.Data.Models
@using PepeWeb.Data.Enums
@using PepeWeb.Data.VirtualModels
@using PepeWeb.Data.DTO;
@using System.Security.Claims

@inject PepeWeb.Services.TableCreationService tableCreationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager

@attribute [Authorize]

<PageTitle>Create a new table</PageTitle>

<h1>Create a table</h1>

<AuthorizeView>
    <Authorized>
        <EditForm Context="editFormContext" Model="_fieldList" OnValidSubmit="Submit" FormName="NewTable">
            <div class="row">
                <div class="col-md-6">

                    <label class="form-label">
                        Table name:
                        <InputText class="form-control" placeholder="Table name" @bind-Value="_tableName" />
                        <ValidationMessage For="() => _tableName" class="text-danger" />
                    </label>
                    <br />
                    <hr />
                    @foreach (var item in _fieldList)
                    {
                        <div>
                            <div >
                                <label class="form-label">
                                    Field:
                                    <InputText class="form-control" placeholder="Field name" @bind-Value="item.Name" />
                                    <ValidationMessage For="() => item.Name" class="text-danger" />
                                </label>
                                <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    @item.Type.ToString()
                                </button>
                                <ul class="dropdown-menu">
                                    @foreach (var fieldType in Enum.GetValues(typeof(CustomFieldType)).Cast<CustomFieldType>())
                                    {
                                        <li>
                                            <button class="dropdown-item" type="button" @onclick="() => item.Type = fieldType">
                                                @fieldType
                                            </button>
                                            <ValidationMessage For="() => item.Type" class="text-danger" />
                                        </li>
                                    }
                                </ul>
                                <button class="btn btn-danger" type="button" @onclick="() => RemoveItem(item)">X</button>
                            </div>
                        </div>
                    }
                    <br />
                    <button class="btn btn-outline-primary" type="button" @onclick="AddItem"> + Add Field</button>
                    <br />
                    <hr />
                    <button class="btn btn-success" type="submit">Submit</button>

                    @if (!string.IsNullOrEmpty(StatusMessage))
                    {
                        <div class="alert alert-success mt-3">
                            @StatusMessage
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger mt-3">
                            @ErrorMessage
                        </div>
                    }

                </div>
            </div>
        </EditForm>
    </Authorized>
    <NotAuthorized>
        You are not authorized to view this content. Please log in.
    </NotAuthorized>
</AuthorizeView>



@code {
    private string _tableName;
    private string? userId;
    private string? StatusMessage;
    private string? ErrorMessage;

    private TableDTO? _newTable = null;
    
    private List<FieldDTO> _fieldList = new List<FieldDTO>();

    protected override async Task OnInitializedAsync()
    {
        _fieldList.Add(new FieldDTO { });

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
    }

    private async Task Submit()
    {

        ErrorMessage = null;
        StatusMessage = null;

        if (await tableCreationService.TableExists(_tableName))
        {
            ErrorMessage = "Table with this name already exists!";
            return;
        }

        IntermediateNewTableData newTableData = new IntermediateNewTableData
            {
                TableName = _tableName,
                Fields = _fieldList,
                UserId = userId

            };

        try
        {
            _newTable = await tableCreationService.CreateTable(newTableData);
            StatusMessage = "Table created successfully!";
        }
        catch (Exception ex)
        {
            // Log error if needed
            Debug.WriteLine($"Error creating table: {ex.Message}");
            ErrorMessage = "An error occurred while creating the table. Please try again.";
        }

        if (_newTable != null)
        {
            navigationManager.NavigateTo($"/table/{_newTable.Id}", true);
        }

        
    }

    private void AddItem()
    {

      _fieldList.Add(new FieldDTO {});

    }

    private void RemoveItem(FieldDTO item)
    {
        _fieldList.Remove(item);

    }


}

