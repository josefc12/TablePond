@page "/table/{tableId:int}"

@using Microsoft.AspNetCore.Authorization
@using TablePond.Data.DTO;
@using TablePond.Data.VirtualModels;
@using System.Diagnostics

@rendermode InteractiveServer

@inject TablePond.Services.TableService tableService
@inject NavigationManager navigationManager

@attribute [StreamRendering]
@attribute [Authorize]

<PageTitle>Auth</PageTitle>

<AuthorizeView>
    <Authorized>
       
        @if (_table != null)
        {
            <div class="col-lg d-flex align-items-center justify-content-between">
                <h1>@_table.Name</h1>
                <div>
                    <button class="btn btn-success" type="button" @onclick="AddRecord">+ Add record</button>
                    <button class="btn btn-outline-warning" type="button" @onclick="EditTable">Edit table</button>
                </div>
                
            </div>
            <br />
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th scope="col">Id</th>
                        @foreach (FieldDTO col in _table.Columns)
                        {
                            <th scope="col">@col.Name</th>
                        }
                        <th scope="col">Edit record</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (TableRow row in _table.Rows)
                    {
                        var iId = @row.ItemId;
                        <tr>
                            <td>@iId</td>
                            @foreach (string val in row.Values)
                            {
                                @if (IsLink(val))
                                {
                                    string formatted = FormatLink(val);
                                    <td><a href=@formatted>Link</a></td>
                                }
                                else
                                {
                                    <td>@val</td>
                                }
                                
                            }
                            <td><button class="btn btn-outline-primary" type="button" @onclick="(() => EditRecord(iId))">Edit</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>Table didn't load.</p>
        }

    </Authorized>
    <NotAuthorized>
        You are not authorized to view this content. Please log in.
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public int tableId { get; set; }

    private TableConstructDTO? _table;

    protected override async Task OnParametersSetAsync()
    {
        // Get user's table
        TableConstructDTO userTable = await tableService.GetUserTableData(tableId);
        _table = userTable;
    }

    private void AddRecord()
    {
        var addRecordUrl = $"table/{tableId}/add";
        navigationManager.NavigateTo(addRecordUrl);
    }

    private void EditRecord(int itemId)
    {
        var addRecordUrl = $"table/{tableId}/edit/{itemId}";
        navigationManager.NavigateTo(addRecordUrl);
    }

    private void EditTable()
    {
        try
        {
            navigationManager.NavigateTo($"/edit/{tableId}");
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }

    }

    private bool IsLink(string text)
    {

        if (text.Length < 4)
        {
            return false;
        }

        string[] models = new string[3] { "www.", "http://", "https://" };

        foreach (string m in models)
        {
            if(text.Length >= m.Length)
            {
                string tSub = text.Substring(0, m.Length);
                if (m == tSub)
                {
                    return true;
                }
            }
        }
        return false;
    }

    private string FormatLink(string link)
    {
        if (link.Substring(0, 7) != "http://" && link.Substring(0, 8) != "https://")
        {
            return "http://" + link;
        }
        return link;
    }

}