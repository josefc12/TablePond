@page "/table/{tableId:int}/edit/{itemId:int}"

@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using System.Diagnostics
@using TablePond.Data.Models
@using TablePond.Data.Enums
@using TablePond.Data.VirtualModels
@using System.Security.Claims
@using TablePond.Data.DTO

@inject TablePond.Services.TableManagementService tableManagementService
@inject TablePond.Services.TableService tableService
@inject TablePond.Services.ValueService valueService
@inject NavigationManager navigationManager

@attribute [Authorize]

<PageTitle>Edit record</PageTitle>

<h1>@_tableName - Edit record</h1>

<AuthorizeView>
    <Authorized>

        <EditForm Context="editFormContext" Model="_rawValues" OnValidSubmit="Submit" FormName="EditRecord">
            <div class="row">
                <div class="col-md-6">

                    @* Load fields of this table *@
                    @foreach (var item in _rawValues)
                    {
                        <div>
                            @* Display for field name/title *@
                            <label class="form-label">
                                Field @item.Field.Name (@item.Field.Type)
                            </label>

                            @* Add input fields based on the type *@
                            <InputText class="form-control" @bind-Value="item.Val" />
                            <ValidationMessage For="() => item.Val" class="text-danger" />
                        </div>
                    }

                    <br />
                    <hr />

                    @* Button that updates the table *@
                    <button class="btn btn-success" type="submit">Change record and return</button>

                    @* Display status messages, if there is a status message *@
                    @if (!string.IsNullOrEmpty(StatusMessage))
                    {
                        <div class="alert alert-success mt-3">  
                                

                            @StatusMessage
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger mt-3">
                            @ErrorMessage
                        </div>
                    }

                </div>
            </div>
        </EditForm>

    </Authorized>
    <NotAuthorized>
        You are not authorized to view this content. Please log in.
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public int tableId { get; set; }
    [Parameter]
    public int itemId { get; set; }

    private string? _tableName;
    private string? _tableNameInitial;
    private TableDTO? _relatedTableObject;
    private string? StatusMessage;
    private string? ErrorMessage;
    private List<FieldRecord> _fieldList = new List<FieldRecord>();
    private List<ValueDTO> _rawValues = new List<ValueDTO>();

    private TableConstructDTO _table = new TableConstructDTO()
        {
            Columns = new List<FieldDTO>(),
            Rows = new List<TableRow>() { new TableRow() { Values = new List<string>() } },

        };

    protected override async Task OnInitializedAsync()
    {
        // Load table data - table to fields relationship
        TableConstructDTO userTable = await tableService.GetUserTableData(tableId);

        _table = userTable;
        _tableName = _table.Name;
        _tableNameInitial = _table.Name;
        _relatedTableObject = await tableService.GetTable(tableId); // Load only the table object itself

        _rawValues = await valueService.GetValuesByItemId(tableId,itemId);


    }

    private async Task Submit()
    {

        ErrorMessage = null;
        StatusMessage = null;

        try
        {
            await tableManagementService.EditRecord(_rawValues);
            StatusMessage = "Record added successfully!";
        }
        catch (Exception ex)
        {
            // Log error if needed
            Debug.WriteLine($"Error creating record: {ex.Message}");
            ErrorMessage = "An error occurred while creating the record. Please try again.";
        }

        navigationManager.NavigateTo($"/table/{tableId}", true);

    }

}

