@page "/table/{tableId:int}/add"

@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using System.Diagnostics
@using TablePond.Data.Models
@using TablePond.Data.Enums
@using TablePond.Data.VirtualModels
@using System.Security.Claims
@using TablePond.Data.DTO

@inject TablePond.Services.TableManagementService tableManagementService
@inject TablePond.Services.TableService tableService
@inject NavigationManager navigationManager

@attribute [Authorize]

<PageTitle>Add record</PageTitle>

<h1>@_tableName - Add record</h1>

<AuthorizeView>
    <Authorized>

        <EditForm Context="addRecordContext" Model="_fieldList" OnValidSubmit="Submit" FormName="AddRecord">
            <div class="row">
                <div class="col-md-6">

                    @* Load fields of this record *@
                    @foreach (var item in _fieldList)
                    {
                        <div>
                            @* Display for field name/title *@
                            <label class="form-label">
                                Field @item.Name (@item.Type)
                            </label>

                            @* Add input fields based on the type *@
                            @switch (item.Type)
                            {

                                case CustomFieldType.Number:
                                    <InputNumber class="form-control" @bind-Value="item.NumberValue" />
                                    <ValidationMessage For="() => item.NumberValue" class="text-danger" />
                                    break;
                                default:
                                    <InputText class="form-control" @bind-Value="item.TextValue" />
                                    <ValidationMessage For="() => item.TextValue" class="text-danger" />
                                    break;

                            }
                        </div>
                    }

                    <br />
                    <hr />

                    @* Button that adds the record *@
                    <button class="btn btn-success" type="submit">Add record and return</button>

                    @* Display status messages, if there is a status message *@
                    @if (!string.IsNullOrEmpty(StatusMessage))
                    {
                        <div class="alert alert-success mt-3">
                            @StatusMessage
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger mt-3">
                            @ErrorMessage
                        </div>
                    }

                </div>
            </div>
        </EditForm>

    </Authorized>
    <NotAuthorized>
        You are not authorized to view this content. Please log in.
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public int tableId { get; set; }

    private string? _tableName;
    private string? _tableNameInitial;
    private TableDTO? _relatedTableObject;

    private string? StatusMessage;
    private string? ErrorMessage;

    private List<FieldRecord> _fieldList = new List<FieldRecord>();
    private List<ValueDTO> _valueList = new List<ValueDTO>();

    private TableConstructDTO _table = new TableConstructDTO()
        {
            Columns = new List<FieldDTO>(),
            Rows = new List<TableRow>() { new TableRow() { Values = new List<string>() } },

        };

    protected override async Task OnInitializedAsync()
    {
        // Load table data
        TableConstructDTO userTable = await tableService.GetUserTableData(tableId);

        if (userTable == null)
        {
            throw new Exception("Table construct returned as null");
        }

        _tableName = userTable.Name;
        _tableNameInitial = userTable.Name;

        if (userTable.Columns != null)
        {
            foreach (FieldDTO field in userTable.Columns)
            {
                _fieldList.Add(new FieldRecord
                    {
                        Name = field.Name,
                        Type = field.Type,
                        TextValue = null,
                        NumberValue = null,
                        Field = field
                    });
            }
        }

    }

    private async Task Submit()
    {

        ErrorMessage = null;
        StatusMessage = null;

        foreach (FieldRecord record in _fieldList)
        {
            string valueToAdd = "";

            if (record.NumberValue != null)
            {
                valueToAdd = record.NumberValue.ToString() ?? "";
            }
            else if (record.TextValue != null)
            {
                valueToAdd = record.TextValue;
            }

            _valueList.Add(new ValueDTO
                {
                    Val = valueToAdd,
                    Field = record.Field
                }
            );
        }

        try
        {
            await tableManagementService.AddRecord(tableId, _valueList);
            StatusMessage = "Record added successfully!";
        }
        catch (Exception ex)
        {
            // Log error if needed
            Debug.WriteLine($"Error creating record: {ex.Message}");
            ErrorMessage = "An error occurred while creating the record. Please try again.";
        }

       navigationManager.NavigateTo($"/table/{tableId}", true);

    }

}

